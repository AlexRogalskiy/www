var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { LitElement, customElement, property, html, css } from 'lit-element';
import { rectangle, ellipse } from 'wired-lib';
let WiredToggle = class WiredToggle extends LitElement {
    constructor() {
        super(...arguments);
        this.checked = false;
        this.disabled = false;
        this.height = 0;
    }
    static get styles() {
        return css `
    :host {
      display: inline-block;
      cursor: pointer;
      position: relative;
      outline: none;
    }
  
    :host(.wired-pending) {
      opacity: 0;
    }
  
    :host(.wired-disabled) {
      opacity: 0.4 !important;
      cursor: default;
      pointer-events: none;
    }
  
    :host(.wired-disabled) svg {
      background: rgba(0, 0, 0, 0.07);
    }

    :host(:focus) path {
      stroke-width: 1.5;
    }
  
    svg {
      display: block;
    }
  
    path {
      stroke: currentColor;
      stroke-width: 0.7;
      fill: transparent;
    }
  
    .unchecked {
      fill: var(--wired-toggle-off-color, gray);
    }
  
    .checked {
      fill: var(--wired-toggle-on-color, rgb(63, 81, 181));
    }
    `;
    }
    render() {
        return html `
    <div @click="${this.toggleCheck}">
      <svg id="svg"></svg>
    </div>
    `;
    }
    createRenderRoot() {
        const root = super.createRenderRoot();
        this.classList.add('wired-pending');
        return root;
    }
    refreshDisabledState() {
        if (this.disabled) {
            this.classList.add('wired-disabled');
        }
        else {
            this.classList.remove('wired-disabled');
        }
        this.tabIndex = this.disabled ? -1 : +(this.getAttribute('tabindex') || 0);
    }
    toggleCheck() {
        this.checked = !(this.checked || false);
        const event = new CustomEvent('change', { bubbles: true, composed: true, detail: { checked: this.checked } });
        this.dispatchEvent(event);
    }
    firstUpdated() {
        this.setAttribute('role', 'switch');
        this.addEventListener('keydown', (event) => {
            if ((event.keyCode === 13) || (event.keyCode === 32)) {
                event.preventDefault();
                this.toggleCheck();
            }
        });
    }
    updated(changed) {
        if (changed.has('disabled')) {
            this.refreshDisabledState();
        }
        const svg = this.shadowRoot.getElementById('svg');
        while (svg.hasChildNodes()) {
            svg.removeChild(svg.lastChild);
        }
        const s = { width: (this.height || 32) * 2.5, height: this.height || 32 };
        svg.setAttribute('width', `${s.width}`);
        svg.setAttribute('height', `${s.height}`);
        rectangle(svg, 0, 0, s.width, s.height);
        const knob = ellipse(svg, s.height / 2, s.height / 2, s.height, s.height);
        const knobOffset = s.width - s.height;
        knob.style.transition = 'all 0.3s ease';
        knob.style.transform = this.checked ? ('translateX(' + knobOffset + 'px)') : '';
        const cl = knob.classList;
        if (this.checked) {
            cl.remove('unchecked');
            cl.add('checked');
        }
        else {
            cl.remove('checked');
            cl.add('unchecked');
        }
        this.setAttribute('aria-checked', `${this.checked}`);
        this.classList.remove('wired-pending');
    }
};
__decorate([
    property({ type: Boolean }),
    __metadata("design:type", Object)
], WiredToggle.prototype, "checked", void 0);
__decorate([
    property({ type: Boolean, reflect: true }),
    __metadata("design:type", Object)
], WiredToggle.prototype, "disabled", void 0);
WiredToggle = __decorate([
    customElement('wired-toggle')
], WiredToggle);
export { WiredToggle };

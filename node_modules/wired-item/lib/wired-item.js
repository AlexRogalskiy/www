var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { LitElement, customElement, property, html } from 'lit-element';
let WiredItem = class WiredItem extends LitElement {
    constructor() {
        super(...arguments);
        this.itemClickHandler = this.onClick.bind(this);
    }
    render() {
        return html `
    <style>
      :host {
        display: block;
        padding: 8px;
        font-family: inherit;
      }
    </style>
    <span>${this.text}</span>
    `;
    }
    connectedCallback() {
        super.connectedCallback();
        this.addEventListener('click', this.itemClickHandler);
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.removeEventListener('click', this.itemClickHandler);
    }
    onClick() {
        const event = new CustomEvent('item-click', { bubbles: true, composed: true, detail: { text: this.text, value: this.value } });
        this.dispatchEvent(event);
    }
};
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], WiredItem.prototype, "text", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], WiredItem.prototype, "value", void 0);
WiredItem = __decorate([
    customElement('wired-item')
], WiredItem);
export { WiredItem };
